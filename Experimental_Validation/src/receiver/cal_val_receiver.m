%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2019 Yi Zhang and The University of Texas at Austin 
%  
% Permission is hereby granted, free of charge, to any person obtaining a 
% copy of this software and associated documentation files (the
% "Software"), to deal in the Software without restriction, including 
% without limitation the rights to use, copy, modify, merge, publish, 
% distribute, sublicense, and/or sell copies of the Software, and to permit
% persons to whom the Software is furnished to do so, subject to the 
% following conditions:
% 
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
% NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
% USE OR OTHER DEALINGS IN THE SOFTWARE.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% If you use this code or any (modified) part of it in any publication,
% please cite:
%
% Yi Zhang, Kartik Patel, Sanjay Shakkottai, and Robert W. Heath Jr.. 2019. 
% Side-information-aided Non-coherent Beam Alignment Design for Millimeter 
% Wave Systems. In MobiHoc '19: The Twentieth ACM International Symposium 
% on Mobile Ad Hoc Networking and Computing, July 02-05, 2019, Catania, 
% Italy. ACM, New York, NY, USA, 10 pages.
%
% Author: Yi Zhang
% Contact email: yi.zhang.cn@utexas.edu 
% Last modified: Apr. 2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function description:
% This function tests the directional beams generated by different
% calibration methods. There are four phased array calibration methods.
% The collected data is saved in 
% [Experimental_Validation\data\val_cal_data].
% Four involved calibration methods are:
% 1. without any calibration (baseline).
% 2. coarse phased array calibration: in this method, the four phase states
%    are considered to be exactly 0, 90, 180, 270. The results are stored
%    in coarse_calibrate_Tx.mat and coarse_calibrate_Rx.mat.
%    For this method, the phase error is stored in coarse_calibrate_Tx.mat 
%    and coarse_calibrate_Rx.mat in folder [Experimental_Validation/data/
%    cal_result].
%    For this method, coarse_calibrate_Tx.mat/coarse_calibrate_Rx.mat only 
%    have four possibilities of values which are four types of error 0, 90, 
%    180 and 270 degrees.
% 3. fine phased array calibration method 1: in this method, the four phase
%    states are considered to be 0+epsilon_n, 90+epsilon_n, 180+epsilon_n,
%    and 270+epsilon_n for the n-th antenna element. Thus, the phase error
%    is antenna dependent but independent of the phase state.
%    For this method, the phase error is stored in Ave_Error_Phase_Tx.mat 
%    and Ave_Error_Phase_Rx.mat in folder [Experimental_Validation/data/
%    cal_result]. For this method, the Ave_Error_Phase_Tx.mat and 
%    Ave_Error_Phase_Rx.mat store the estimated phase shift error epsilon_n 
%    which needs to be added to the nominal phase 0, 90, 180 or 270 to be 
%    the real phase corresponding to the nominal four types 00, 01, 10, 11 
%    phase states.
% 4. fine phased array calibration method 2: in this method, the four phase
%    states are considered to be 0+epsilon_n,1, 90+epsilon_n,2, 
%    180+epsilon_n,3, and 270+epsilon_n,4. This means the phase error is
%    not only antenna dependent but also phase state dependent, which is
%    a more realistic model.
%    For this method, the phase error is stored in Fine_calibrate_Tx.mat 
%    and Fine_calibrate_Rx.mat in folder [Experimental_Validation/data/
%    cal_result]. In particular, the Fine_calibrate_Tx.mat and 
%    Fine_calibrate_Rx.mat store the estimated phase of the nominal four 
%    types 00, 01, 10, 11 phase states.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input arguments:
% AoD_True: true AoD, measured manually.
% AoA_True: true AoA, measured manually.
% compileIt: whether to compile the run_usrp_rx.m again for Codegen.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Output arguments:
% cpr_result: a structure array detailed as below:
%    cal_val_result.AoA: true AoA.
%    cal_val_result.AoD: true AoD.
%    cal_val_result.RSSI: RSSI received by different calibration methods,
%    including the major baseline where no calibration is performed.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function cal_val_result = cal_val_receiver(AoD_True, AoA_True, compileIt)
    %% Initialization 
    address = '192.168.20.2';
    platform = 'N200/N210/USRP2';
    SerialPortTx = ['/dev/tty.usbmodem3441'];
    SerialPortRx = ['/dev/tty.usbmodem221'];
    phase_array_id_rx = 2; 
    phase_array_id_tx = 3;
    if AoD_True == 0
        Program_ID = 5;
        Test_Angles = AoA_True;
        phase_array_id = phase_array_id_rx;
    else
        Test_Angles = AoD_True;
        Program_ID = 4.1;
        phase_array_id = phase_array_id_tx;
    end

    %% System and receiver parameters
    prmQPSKReceiver = sdruqpskreceiver_init(platform);
    prmQPSKReceiver.Platform = platform;
    prmQPSKReceiver.Address = address;  

    %% Set Tx Rx training beam patterns
    repetition = 3;
    num_codebook_to_train = 4*repetition;
    
    %% Assign test beam pattern
    [prmPAControl, type_prmPAControl] = phase_array_control_init(prmQPSKReceiver, SerialPortTx, SerialPortRx, Program_ID, 'num_codebook_to_train', num_codebook_to_train);
    type_portion_of_boundary_frame_to_remove = coder.newtype('double',[1 1]);
    Output = get_beam_pattern(Test_Angles,phase_array_id,false);
    if AoD_True == 0
        prmPAControl.CodeBook_Rx(1:repetition,:) = repmat(Output.Phvec_command_no_calibration,3,1);
        prmPAControl.CodeBook_Rx(1*repetition+1:2*repetition,:) = repmat(Output.Phvec_command_coarse,3,1);
        prmPAControl.CodeBook_Rx(2*repetition+1:3*repetition,:) = repmat(Output.Phvec_command_fine_m1,3,1);
        prmPAControl.CodeBook_Rx(3*repetition+1:4*repetition,:) = repmat(Output.Phvec_command_fine_m2,3,1);
    else
        prmPAControl.CodeBook_Tx(1:repetition,:) = repmat(Output.Phvec_command_no_calibration,3,1);
        prmPAControl.CodeBook_Tx(1*repetition+1:2*repetition,:) = repmat(Output.Phvec_command_coarse,3,1);
        prmPAControl.CodeBook_Tx(2*repetition+1:3*repetition,:) = repmat(Output.Phvec_command_fine_m1,3,1);
        prmPAControl.CodeBook_Tx(3*repetition+1:4*repetition,:) = repmat(Output.Phvec_command_fine_m2,3,1);
    end
    
    %% Global storage for corrupted signal and calculated BERMER
    global Raw_corruptSignal
    SamplesPerFrame = prmQPSKReceiver.FrameSize * prmQPSKReceiver.Upsampling * prmQPSKReceiver.RxBufferedFrames;
    Raw_corruptSignal = complex(zeros(...
        SamplesPerFrame,...
        int32(prmPAControl.Number_of_Frames_Per_Test_Rx_Buffered),...
        prmPAControl.Maximum_Number_State_To_Test));

    %% Clearance
    clear run_usrp_rx_mex %#ok<UNRCH>
    clear Control_Phase_Array_External_mex %#ok<UNRCH>
    clear run_offline_decoder_mex %#ok<UNRCH>

    %% Compilation
    if compileIt
        codegen('run_usrp_rx', 'PATR.c', 'PATR.h', '-args', {coder.Constant(prmQPSKReceiver), type_prmPAControl}, ...
                                                   '-I', char(strcat(pwd,'/Experimental_Validation/src/array_control')));%#ok<UNRCH>
        codegen('Control_Phase_Array_External', 'PATR.c', 'PATR.h', '-args', {type_prmPAControl}, ...
                                                   '-I', char(strcat(pwd,'/Experimental_Validation/src/array_control')));%#ok<UNRCH>
        codegen('run_offline_decoder', '-args', {coder.Constant(prmQPSKReceiver), type_prmPAControl, type_portion_of_boundary_frame_to_remove});%#ok<UNRCH>       
    end

    %% Data collection
    disp('----------------------------------------------------------')
    disp('----------- Collection of received raw signal ------------');
    disp('----------------------------------------------------------')
    clear run_usrp_rx_mex %#ok<UNRCH>
    run_usrp_rx_mex(prmQPSKReceiver, prmPAControl);

    %% Decoding and show result
    BERMER = run_offline_decoder_mex(prmQPSKReceiver, prmPAControl, 0);
    cal_val_result.AoA = AoA_True;
    cal_val_result.AoD = AoD_True;
    cal_val_result.RSSI = BERMER(7,:);
    figure
    bar(cal_val_result.RSSI);
    folder = char(strcat(pwd,'/Experimental_Validation/data/val_cal_data'));
    mat_name = ['/val_cal_experiment_result_' num2str(AoD_True) '_' num2str(AoA_True) '.mat'];
    matfile = fullfile(folder,mat_name);
    save(matfile)
end